using System;
using System.Collections.Generic;
using System.Text;

namespace S2p.RestClient.Sdk.Entities
{
    public static class CardReturnCodeId
    {
        public const int Undefined = 0;
        public const int InvalidData = 1;
        public const int ValidationFailed = 2;
        public const int OK = 10;
        public const int GenericError = 13;
        public const int InvalidPayment = 17;
        public const int TechnicalError = 18;
        public const int DatabaseTechnicalError = 19;
        public const int DuplicateKey = 20;
        public const int PaymentAlreadyProcessed = 21;
        public const int PayoutAlreadyProcessed = 22;
        public const int RefundAlreadyProcessed = 23;
        public const int InvalidRoute = 100;
        public const int InvalidIntegrationTypeUsage = 101;
        public const int FormTechnicalError = 102;
        public const int TransactionTooManyAttempts = 103;
        public const int TransactionExpired = 104;
        public const int InvalidPaymentAction = 105;
        public const int InvalidOffset = 106;
        public const int InvalidLimit = 107;
        public const int InvalidCountry = 108;
        public const int InvalidCurrency = 109;
        public const int InvalidMerchantTransactionID = 110;
        public const int InvalidAmount = 111;
        public const int InvalidDateTime = 112;
        public const int InvalidAcquirerTransactionID = 113;
        public const int InvalidSkinID = 114;
        public const int InvalidFraudProvider = 115;
        public const int RejectByFraudProvider = 116;
        public const int ChallangeByFraudProvider = 117;
        public const int ChallengeRejected = 118;
        public const int TransactionCancelledByCustomer = 119;
        public const int InvalidInitialTransactionID = 120;
        public const int InvalidPaymentMerchantTransactionID = 1000;
        public const int InvalidPaymentAmount = 1001;
        public const int InvalidPaymentCurrency = 1002;
        public const int InvalidPaymentReturnURL = 1003;
        public const int InvalidPaymentDescription = 1004;
        public const int InvalidPaymentStatementDescriptor = 1005;
        public const int InvalidPaymentState = 1006;
        public const int InvalidPaymentLanguage = 1007;
        public const int InvalidPaymentToken = 1008;
        public const int InvalidPaymentFraudCheckMode = 1009;
        public const int PaymentInProcess = 1010;
        public const int InvalidPaymentOriginatorTransactionID = 1011;
        public const int InvalidPaymentAmountToCapture = 1012;
        public const int PaymentAmountToCaptureExceedsAuthorizedAmount = 1013;
        public const int InvalidPaymentInstallments = 1014;
        public const int InvalidCardDetailsHolderName = 1200;
        public const int InvalidCardDetailsNumber = 1201;
        public const int InvalidCardDetailsExpirationMonth = 1202;
        public const int InvalidCardDetailsExpirationYear = 1203;
        public const int InvalidCardDetailsSecurityCode = 1204;
        public const int InvalidCardDetailsCardExpired = 1205;
        public const int MissingCardDetails = 1206;
        public const int AddressIsRequired = 1400;
        public const int InvalidAddressCity = 1401;
        public const int InvalidAddressZipCode = 1402;
        public const int InvalidAddressState = 1403;
        public const int InvalidAddressStreet = 1404;
        public const int InvalidAddressStreetNumber = 1405;
        public const int InvalidAddressHouseNumber = 1406;
        public const int InvalidAddressHouseExtension = 1407;
        public const int InvalidAddressCountryCode = 1408;
        public const int InvalidAddressCountryInexistent = 1409;
        public const int InvalidAddressID = 1410;
        public const int InvalidMerchantCustomerID = 1600;
        public const int InvalidCustomerEmail = 1601;
        public const int InvalidCustomerFirstname = 1602;
        public const int InvalidCustomerLastname = 1603;
        public const int InvalidCustomerGender = 1604;
        public const int InvalidCustomerSocialSecurityNumber = 1605;
        public const int InvalidCustomerPhone = 1606;
        public const int InvalidCustomerCompany = 1607;
        public const int InvalidCustomerID = 1608;
        public const int CustomerIsRequired = 1609;
        public const int InvalidProviderInformation = 1800;
        public const int DuplicateProviderTransaction = 1801;
        public const int InvalidPayoutMerchantTransactionID = 2000;
        public const int InvalidPayoutAmount = 2001;
        public const int InvalidPayoutCurrency = 2002;
        public const int InvalidPayoutDescription = 2003;
        public const int InvalidPayoutStatementDescriptor = 2004;
        public const int InvalidPayoutState = 2005;
        public const int InvalidRefundMerchantTransactionID = 2200;
        public const int InvalidRefundAmount = 2201;
        public const int InvalidRefundCurrency = 2202;
        public const int InvalidRefundDescription = 2203;
        public const int InvalidRefundStatementDescriptor = 2204;
        public const int InvalidRefundState = 2205;
        public const int RefundAmountExceedsInitialPaymentAmount = 2206;
        public const int AnotherRefundIsInProcess = 2207;
        public const int PartialRefundsNotAvailable = 2208;
        public const int InvalidRefundOriginatorTransactionID = 2209;
        public const int InvalidCreditCardToken = 2400;
        public const int CreditCardTokenNotAvailable = 2401;
        public const int CreditCardTokenUsageLimitExceed = 2402;
        public const int InvalidCreditCardForCardToken = 2403;
        public const int MissingCreditCardTokenDetails = 2404;
        public const int MissingCreditCardDetails = 2600;
        public const int InvalidMerchantSiteID = 2800;
        public const int InvalidMerchantSiteMerchantID = 2801;
        public const int InvalidMerchantSiteURL = 2802;
        public const int InvalidMerchantSiteNotificationURL = 2803;
        public const int InvalidMerchantSiteSignature = 2804;
        public const int InvalidMerchantSiteDisplayName = 2805;
        public const int InvalidMerchantSiteCountryInexistent = 2806;
        public const int InvalidMerchantSiteFraudCheckMode = 2807;
        public const int PaymentPartiallyCapturedException = 4996;
        public const int PaymentCapturedException = 4997;
        public const int PaymentAuthorizedException = 4998;
        public const int MissingFraudProviderReturnCode = 4999;
        public const int MissingAcquirerRouteReturnCode = 5000;

    }
}
